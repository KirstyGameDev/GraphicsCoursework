cbuffer MatrixBuffer
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
};

struct ConstantOutputType
{
    float edges[4] : SV_TessFactor;
    float inside[2] : SV_InsideTessFactor;
};

struct HullOutputType
{
   float3 position : POSITION;
   float2 tex : TEXCOORD0;
   float4 normal : NORMAL;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 normal : NORMAL;
	float2 tex : TEXCOORD0;
};

[domain("quad")]

PixelInputType ColorDomainShader(ConstantOutputType input, float2 uvwCoord : SV_DomainLocation, const OutputPatch<HullOutputType, 4> patch)
{
    float3 vertexPosition;
	float3 vertexNormal;
    PixelInputType output;

    // Determine the position of the new vertex.
   // vertexPosition = uvwCoord.x * patch[0].position + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position;
   float3 v1 = lerp(patch[0].position,patch[1].position, 1-uvwCoord.y);
   float3 v2 = lerp(patch[2].position, patch[3].position, 1-uvwCoord.y);
   vertexPosition = lerp(v1,v2,uvwCoord.x);
    
	//Calculate the normals
	float3 n1 = lerp(patch[0].normal, patch[1].normal, 1-uvwCoord.y);
	float3 n2 = lerp(patch[2].normal, patch[3].normal, 1-uvwCoord.y);
	vertexNormal = lerp(n1, n2, uvwCoord.x);

    // Calculate the position of the new vertex against the world, view, and projection matrices.
    output.position = mul(float4(vertexPosition, 1.0f), worldMatrix);
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);

	//Pass the texture uv of the patch point to the pixel shader
	output.tex = uvwCoord;

	//output.normal = (float3)vertexNormal;

  //Normalize the normal vector
  output.normal = 0;

    return output;
}

